using System;
using NSec.Cryptography;
using Xunit;

namespace OpenPayments.Sdk.HttpSignatureUtils.Tests;

public class KeyUtils_GenerateJwk_Tests
{
    [Fact]
    public void GenerateJwk_WithAutoGeneratedKey_ReturnsValidJwk()
    {
        string keyId = "test-key";
        var jwk = KeyUtils.GenerateJwk(keyId);

        Assert.NotNull(jwk);
        Assert.Equal("OKP", jwk.Kty);
        Assert.Equal("Ed25519", jwk.Crv);
        Assert.Equal("EdDSA", jwk.Alg);
        Assert.Equal(keyId, jwk.Kid);
        Assert.False(string.IsNullOrWhiteSpace(jwk.X));
        Assert.Null(jwk.D); // Ensure private key is not included
    }

    [Fact]
    public void GenerateJwk_WithProvidedPrivateKey_UsesCorrectPublicKey()
    {
        var algorithm = SignatureAlgorithm.Ed25519;

        var privateKey = new Key(algorithm, new KeyCreationParameters
        {
            ExportPolicy = KeyExportPolicies.AllowPlaintextExport
        });

        byte[] expectedPublicKey = privateKey.PublicKey.Export(KeyBlobFormat.RawPublicKey);
        string expectedX = Convert.ToBase64String(expectedPublicKey);
        var jwk = KeyUtils.GenerateJwk("my-key-id", privateKey);

        Assert.Equal(expectedX, jwk.X);
        Assert.Equal("my-key-id", jwk.Kid);
    }

    [Theory]
    [InlineData(null)]
    [InlineData("")]
    [InlineData("   ")]
    public void GenerateJwk_InvalidKeyId_ThrowsArgumentException(string badKeyId)
    {
        Assert.Throws<ArgumentException>(() => KeyUtils.GenerateJwk(badKeyId));
    }
}