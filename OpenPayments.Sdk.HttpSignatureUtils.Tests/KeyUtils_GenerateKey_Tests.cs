using System;
using System.IO;
using NSec.Cryptography;
using Xunit;
namespace OpenPayments.Sdk.HttpSignatureUtils.Tests;

public class KeyUtils_GenerateKey_Tests
{
    [Fact]
    public void GenerateKey_WithoutSaving_ReturnsValidKey()
    {
        var key = KeyUtils.GenerateKey();

        Assert.NotNull(key);
        Assert.Equal(SignatureAlgorithm.Ed25519, key.Algorithm);
        Assert.True(key.HasPublicKey);
    }

    [Fact]
    public void GenerateKey_WithCustomFileName_SavesFile()
    {
        string tempDir = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());
        Directory.CreateDirectory(tempDir);

        var args = new GenerateKeyArgs
        {
            Dir = tempDir,
            Filename = "custom-key.pem"
        };

        var key = KeyUtils.GenerateKey(args);

        string expectedPath = Path.Combine(tempDir, "custom-key.pem");
        Assert.True(File.Exists(expectedPath), "Expected PEM file to be created");

        string pemContent = File.ReadAllText(expectedPath);
        Assert.Contains("-----BEGIN PRIVATE KEY-----", pemContent);

        Directory.Delete(tempDir, true);
    }

    [Fact]
    public void GenerateKey_WithAutoGeneratedFileName_SavesFile()
    {
        string tempDir = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());
        Directory.CreateDirectory(tempDir);

        var args = new GenerateKeyArgs
        {
            Dir = tempDir
        };

        _ = KeyUtils.GenerateKey(args);

        string[] files = Directory.GetFiles(tempDir, "*.pem");
        Assert.Single(files);

        string pemContent = File.ReadAllText(files[0]);
        Assert.Contains("-----BEGIN PRIVATE KEY-----", pemContent);

        Directory.Delete(tempDir, true);
    }
}